type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type NetworkDetails = record {
  gas : nat;
  chain_id : nat64;
  nonce : nat64;
  gas_price : nat;
};
type Networks = record {
  vault_contract : text;
  name : text;
  gov_address : text;
  evm_pool_contract_address : text;
  cover_address : text;
  rpc_url : text;
  supported_assets : vec text;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : NetworkDetails; Err : text };
type Result_3 = variant { Ok : nat; Err : text };
type Result_4 = variant { Ok : Networks; Err : text };
type Result_5 = variant { Ok : UserDeposit; Err : text };
type TransformArgs = record { context : blob; response : HttpResponse };
type UserDeposit = record {
  lp : principal;
  asset : text;
  accrued_payout : nat;
  start_date : nat;
  expiry_date : nat;
  days_left : nat;
  pool_id : nat;
  daily_payout : nat;
  amount : nat;
};
service : () -> {
  Poolwithdraw : (nat64, text, nat8, nat64) -> (Result);
  addNetworkAsset : (nat64, text) -> (Result_1);
  addNewNetwork : (text, nat64, text, vec text, text, text, text, text) -> (
      Result_1,
    );
  claimProposalFunds : (nat64, text, nat64) -> (Result);
  getCanisterAddress : () -> (Result) query;
  getNetworkDetails : (nat64) -> (Result_2) query;
  getNetworkTVL : (text, nat) -> (Result_3);
  getNetworks : (nat64) -> (Result_4) query;
  getOwner : () -> (opt principal) query;
  getTotalTVL : () -> (Result_3);
  getUserPoolDeposit : (nat64, text, nat8, nat64) -> (Result_5) query;
  setOwner : (principal) -> (Result_1);
  setPoolContractAddress : (text) -> (Result_1);
  transform : (TransformArgs) -> (HttpResponse) query;
  updateNetwork : (text, nat64, text, vec text, text, text, text, text) -> (
      Result_1,
    );
  vaultwithdraw : (nat64, text, nat8, nat64) -> (Result);
}
